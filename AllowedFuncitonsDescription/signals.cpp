/* In C and C++, `signal` is a function used for handling various
signals received by a process. Signals are asynchronous notifications
sent to a process, typically by the operating system, to indicate that
a particular event has occurred.

The `signal` function allows you to specify how a process should handle
specific signals. It takes the following parameters:

- **Signal number:** An integer representing the signal you want
	to handle. For example, `SIGINT` is typically used for
	interrupting a process (`Ctrl+C` in many systems).
- **Handler:** A pointer to the function that should handle the signal.
	This can be a custom signal handler function or one of the predefined
	signal handling options like `SIG_IGN` (to ignore the signal) or
	`SIG_DFL` (to use the default action associated with the signal).

Here's an example demonstrating the use of `signal`: */

#include <stdio.h>
#include <signal.h>

void sigint_handler(int signum) {
	printf("Received SIGINT (%d)\n", signum);
	// Add your custom handling logic here
}

int main() {
	signal(SIGINT, sigint_handler); // Registering the handler for SIGINT

	// Your main program loop
	while (1) {
		// Do some work here
	}

	return 0;
}

/* In this example, `sigint_handler` is a function that will be executed
when the program receives the `SIGINT` signal (typically generated by
pressing `Ctrl+C`). Within the signal handler function, you can perform
actions like cleanup, logging, or even preventing the default signal action.

Remember, signals can interrupt the normal flow of your program, so signal
handlers should be designed to perform minimal and non-blocking operations. */